#version 330 core


//Comes from the VAO,VBO
in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;

//Delivered in java
uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];

uniform vec4 plane;

const float density  = 0.0030;
const float gradient = 10.0;

void main(void){
	
	
	vec4 worldPosition = transformationMatrix * vec4(position.xyz, 1.0);
	vec4 positionRelativeToCamera = viewMatrix * worldPosition;
	
	//tell opengl every vertex is outside
	gl_ClipDistance[0] = dot(worldPosition, plane) ;
	
	gl_Position = projectionMatrix * positionRelativeToCamera;
	pass_textureCoords = textureCoords;

	surfaceNormal = (transformationMatrix * vec4(normal,0.0)).xyz;
	for(int i = 0; i < 4 ; i++){
		toLightVector[i] =  lightPosition[i] - worldPosition.xyz;
	}
	//camera has *negative* transformation, so take inverse of viewMatrix
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCamera.xyz);
	visibility = exp(-pow((distance*density), gradient));
	visibility = clamp(visibility ,0.0, 1.0);
}