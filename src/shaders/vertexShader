#version 330 core


//Comes from the VAO,VBO
in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[4]; //maqximum number of lights that can affect entity at once - arb, more is slower
out vec3 toCameraVector;
out float visibility;



//Delivered in java
uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];

uniform float useFakeLighting;

//atlas
uniform float numberOfRows;
uniform vec2 offset;

//fog constants
const float density  = 0.0030;
const float gradient = 10.0;

uniform vec4 plane;

void main(void){
	
	vec4 worldPosition = transformationMatrix * vec4(position.xyz, 1.0);
	
	//tell opengl every vertex is outside
	gl_ClipDistance[0] = dot(worldPosition, plane) ;
	
	vec4 positionRelativeToCamera = viewMatrix * worldPosition; //give vertex pos rel to camera
	gl_Position = projectionMatrix * positionRelativeToCamera;
	pass_textureCoords = (textureCoords/numberOfRows) + offset;
	
	//for abnormal and inconsistent lighting, use this fake lighting
	vec3 actualNormal = normal;
	if(useFakeLighting > 0.5){
		actualNormal = vec3(0.0, 1.0, 0.0);
	}
	
	surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz;
	for(int i=0;i<4;i++){
		toLightVector[i] =  lightPosition[i] - worldPosition.xyz;
	}
	//toLightVector =  lightPosition - worldPosition.xyz;
	//camera has *negative* transformation, so take inverse of viewMatrix
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCamera.xyz);
	visibility = exp(-pow((distance*density), gradient));
	visibility = clamp(visibility, 0.0, 1.0); //clamp valuebetween 0 and 1 
	
}