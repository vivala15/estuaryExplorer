#version 330 core

//Comes from the VAO,VBO
in vec3 position;
in vec3 normal;
in vec2 textureCoords;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform vec3 lightPosition;

uniform vec3 cameraPosition;
out vec4 clipSpace;
out vec2 pass_textureCoords;
out vec3 toCameraVector;
out vec3 fromLightVector;
out vec3 normal_vector;
out vec3 halfway_vector;
out vec3 light_vector;


const float tiling = 1.0;

void main(void) {


	vec4 worldPosition = modelMatrix * vec4(position, 1.0);
	gl_Position = projectionMatrix * viewMatrix * worldPosition;
	
	clipSpace = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
	
	pass_textureCoords = textureCoords;
	//pass_textureCoords = vec2(position.x/2.0 + 0.5, position.y/2.0 + 0.5) * tiling;
	normal_vector = normal;
	vec3 normal1 = normalize(normal);
	//normal_vector = (inverse(transpose(viewMatrix * modelMatrix)) * vec4(normal1, 0.0)).xyz;
	
	vec4 v = viewMatrix * modelMatrix * vec4(position, 1.0);
	halfway_vector = light_vector + normalize(-v.xyz);
	
	//vec3 light_vector = normalize((viewMatrix * vec4(lightPosition,1.0)).xyz- v.xyz);
	
	toCameraVector = cameraPosition - worldPosition.xyz;
	fromLightVector = worldPosition.xyz - lightPosition;
	light_vector = fromLightVector;
 	
}